{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ganes\\\\Downloads\\\\my-app\\\\my-app\\\\src\\\\context\\\\PokemonProvider.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useForm } from '../hook/useForm';\nimport { PokemonContext } from './PokemonContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PokemonProvider = ({\n  children\n}) => {\n  _s();\n  const [allPokemons, setAllPokemons] = useState([]);\n  const [globalPokemons, setGlobalPokemons] = useState([]);\n  const [offset, setOffset] = useState(0);\n\n  // Utilizar CustomHook - useForm\n  const {\n    valueSearch,\n    onInputChange,\n    onResetForm\n  } = useForm({\n    valueSearch: ''\n  });\n\n  // Estados para la aplicación simples\n  const [loading, setLoading] = useState(true);\n  const [active, setActive] = useState(false);\n\n  // lLamar 50 pokemones a la API\n  const getAllPokemons = async (limit = 50) => {\n    const baseURL = 'https://pokeapi.co/api/v2/';\n    const res = await fetch(`${baseURL}pokemon?limit=${limit}&offset=${offset}`);\n    const data = await res.json();\n    const promises = data.results.map(async pokemon => {\n      const res = await fetch(pokemon.url);\n      const data = await res.json();\n      return data;\n    });\n    const results = await Promise.all(promises);\n    setAllPokemons([...allPokemons, ...results]);\n    setLoading(false);\n  };\n\n  // Llamar todos los pokemones\n  const getGlobalPokemons = async () => {\n    const baseURL = 'https://pokeapi.co/api/v2/';\n    const res = await fetch(`${baseURL}pokemon?limit=100000&offset=0`);\n    const data = await res.json();\n    const promises = data.results.map(async pokemon => {\n      const res = await fetch(pokemon.url);\n      const data = await res.json();\n      return data;\n    });\n    const results = await Promise.all(promises);\n    setGlobalPokemons(results);\n    setLoading(false);\n  };\n\n  // Llamar a un pokemon por ID\n  const getPokemonByID = async id => {\n    const baseURL = 'https://pokeapi.co/api/v2/';\n    const res = await fetch(`${baseURL}pokemon/${id}`);\n    const data = await res.json();\n    return data;\n  };\n  useEffect(() => {\n    getAllPokemons();\n  }, [offset]);\n  useEffect(() => {\n    getGlobalPokemons();\n  }, []);\n\n  // BTN CARGAR MÁS\n  const onClickLoadMore = () => {\n    setOffset(offset + 50);\n  };\n  const [filteredPokemons, setfilteredPokemons] = useState([]);\n  const handleCheckbox = e => {\n    // setTypeSelected({\n    // \t...typeSelected,\n    // \t[e.target.name]: e.target.checked,\n    // });\n\n    if (e.target.checked) {\n      const filteredResults = globalPokemons.filter(pokemon => pokemon.types.map(type => type.type.name).includes(e.target.name));\n      setfilteredPokemons([...filteredPokemons, ...filteredResults]);\n    } else {\n      const filteredResults = filteredPokemons.filter(pokemon => !pokemon.types.map(type => type.type.name).includes(e.target.name));\n      setfilteredPokemons([...filteredResults]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(PokemonContext.Provider, {\n    value: {\n      valueSearch,\n      onInputChange,\n      onResetForm,\n      allPokemons,\n      globalPokemons,\n      getPokemonByID,\n      onClickLoadMore,\n      // Loader\n      loading,\n      setLoading,\n      // Btn Filter\n      active,\n      setActive,\n      // Filter Container Checkbox\n      handleCheckbox,\n      filteredPokemons\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 3\n  }, this);\n};\n_s(PokemonProvider, \"/XI5VMlGNaSp6N1IFr8UUVTl/7M=\", false, function () {\n  return [useForm];\n});\n_c = PokemonProvider;\nvar _c;\n$RefreshReg$(_c, \"PokemonProvider\");","map":{"version":3,"names":["useEffect","useState","useForm","PokemonContext","jsxDEV","_jsxDEV","PokemonProvider","children","_s","allPokemons","setAllPokemons","globalPokemons","setGlobalPokemons","offset","setOffset","valueSearch","onInputChange","onResetForm","loading","setLoading","active","setActive","getAllPokemons","limit","baseURL","res","fetch","data","json","promises","results","map","pokemon","url","Promise","all","getGlobalPokemons","getPokemonByID","id","onClickLoadMore","filteredPokemons","setfilteredPokemons","handleCheckbox","e","target","checked","filteredResults","filter","types","type","name","includes","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ganes/Downloads/my-app/my-app/src/context/PokemonProvider.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useForm } from '../hook/useForm';\r\nimport { PokemonContext } from './PokemonContext';\r\n\r\nexport const PokemonProvider = ({ children }) => {\r\n\tconst [allPokemons, setAllPokemons] = useState([]);\r\n\tconst [globalPokemons, setGlobalPokemons] = useState([]);\r\n\tconst [offset, setOffset] = useState(0);\r\n\r\n\t// Utilizar CustomHook - useForm\r\n\tconst { valueSearch, onInputChange, onResetForm } = useForm({\r\n\t\tvalueSearch: '',\r\n\t});\r\n\r\n\t// Estados para la aplicación simples\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [active, setActive] = useState(false);\r\n\r\n\t// lLamar 50 pokemones a la API\r\n\tconst getAllPokemons = async (limit = 50) => {\r\n\t\tconst baseURL = 'https://pokeapi.co/api/v2/';\r\n\r\n\t\tconst res = await fetch(\r\n\t\t\t`${baseURL}pokemon?limit=${limit}&offset=${offset}`\r\n\t\t);\r\n\t\tconst data = await res.json();\r\n\r\n\t\tconst promises = data.results.map(async pokemon => {\r\n\t\t\tconst res = await fetch(pokemon.url);\r\n\t\t\tconst data = await res.json();\r\n\t\t\treturn data;\r\n\t\t});\r\n\t\tconst results = await Promise.all(promises);\r\n\r\n\t\tsetAllPokemons([...allPokemons, ...results]);\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\t// Llamar todos los pokemones\r\n\tconst getGlobalPokemons = async () => {\r\n\t\tconst baseURL = 'https://pokeapi.co/api/v2/';\r\n\r\n\t\tconst res = await fetch(\r\n\t\t\t`${baseURL}pokemon?limit=100000&offset=0`\r\n\t\t);\r\n\t\tconst data = await res.json();\r\n\r\n\t\tconst promises = data.results.map(async pokemon => {\r\n\t\t\tconst res = await fetch(pokemon.url);\r\n\t\t\tconst data = await res.json();\r\n\t\t\treturn data;\r\n\t\t});\r\n\t\tconst results = await Promise.all(promises);\r\n\r\n\t\tsetGlobalPokemons(results);\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\t// Llamar a un pokemon por ID\r\n\tconst getPokemonByID = async id => {\r\n\t\tconst baseURL = 'https://pokeapi.co/api/v2/';\r\n\r\n\t\tconst res = await fetch(`${baseURL}pokemon/${id}`);\r\n\t\tconst data = await res.json();\r\n\t\treturn data;\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tgetAllPokemons();\r\n\t}, [offset]);\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGlobalPokemons();\r\n\t}, []);\r\n\r\n\t// BTN CARGAR MÁS\r\n\tconst onClickLoadMore = () => {\r\n\t\tsetOffset(offset + 50);\r\n\t};\r\n\r\n\r\n\r\n\r\n\tconst [filteredPokemons, setfilteredPokemons] = useState([]);\r\n\r\n\tconst handleCheckbox = e => {\r\n\t\t// setTypeSelected({\r\n\t\t// \t...typeSelected,\r\n\t\t// \t[e.target.name]: e.target.checked,\r\n\t\t// });\r\n\r\n\t\tif (e.target.checked) {\r\n\t\t\tconst filteredResults = globalPokemons.filter(pokemon =>\r\n\t\t\t\tpokemon.types\r\n\t\t\t\t\t.map(type => type.type.name)\r\n\t\t\t\t\t.includes(e.target.name)\r\n\t\t\t);\r\n\t\t\tsetfilteredPokemons([...filteredPokemons, ...filteredResults]);\r\n\t\t} else {\r\n\t\t\tconst filteredResults = filteredPokemons.filter(\r\n\t\t\t\tpokemon =>\r\n\t\t\t\t\t!pokemon.types\r\n\t\t\t\t\t\t.map(type => type.type.name)\r\n\t\t\t\t\t\t.includes(e.target.name)\r\n\t\t\t);\r\n\t\t\tsetfilteredPokemons([...filteredResults]);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<PokemonContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tvalueSearch,\r\n\t\t\t\tonInputChange,\r\n\t\t\t\tonResetForm,\r\n\t\t\t\tallPokemons,\r\n\t\t\t\tglobalPokemons,\r\n\t\t\t\tgetPokemonByID,\r\n\t\t\t\tonClickLoadMore,\r\n\t\t\t\t// Loader\r\n\t\t\t\tloading,\r\n\t\t\t\tsetLoading,\r\n\t\t\t\t// Btn Filter\r\n\t\t\t\tactive,\r\n\t\t\t\tsetActive,\r\n\t\t\t\t// Filter Container Checkbox\r\n\t\t\t\thandleCheckbox,\r\n\t\t\t\tfilteredPokemons,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</PokemonContext.Provider>\r\n\t);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}